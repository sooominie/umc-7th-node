generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int      @id @default(autoincrement())
  email         String   @unique(map: "email") @db.VarChar(255)
  name          String   @db.VarChar(100)
  gender        String   @db.VarChar(15)
  birth         DateTime @db.Date
  address       String   @db.VarChar(255)
  detailAddress String?  @map("detail_address") @db.VarChar(255)
  phoneNumber   String   @map("phone_number") @db.VarChar(15)

 userFavorCategories UserFavorCategory[]


  @@map("user")
}

model FoodCategory {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(100)

  userFavorCategories UserFavorCategory[]

  @@map("food_category")
}

model UserFavorCategory {
  id             Int          @id @default(autoincrement())
  user           User         @relation(fields: [userId], references: [id])
  userId         Int          @map("user_id")
  foodCategory   FoodCategory @relation(fields: [foodCategoryId], references: [id])
  foodCategoryId Int          @map("food_category_id")

  @@index([foodCategoryId], map: "f_category_id")
  @@index([userId], map: "user_id")
  @@map("user_favor_category")
}





model Member {
  id           BigInt    @id @default(autoincrement())
  name         String?
  gender       String?    @default("M") // ENUM('M', 'F')가 Prisma에서는 String으로 정의됨
  birth        DateTime?
  nickname     String?
  address      String?
  phone_number String?
  email        String?
  created_at   DateTime   @default(now())
  deleted_at   DateTime?
  updated_at   DateTime?  @updatedAt
  status       String?

  reviews      Review[]
}

model Review {
  id             BigInt    @id @default(autoincrement())
  member_id      BigInt
  restaurant_id  BigInt
  review_rating  Float
  review_content String
  created_at     DateTime   @default(now())
  deleted_at     DateTime?
  updated_at     DateTime?  @updatedAt
  status         String?

  member         Member     @relation(fields: [member_id], references: [id])
  restaurant     Restaurant @relation(fields: [restaurant_id], references: [id])
}

model Restaurant {
  id                  BigInt    @id @default(autoincrement())
  region_id           BigInt?
  restaurant_name     String
  restaurant_address  String
  restaurant_category String
  created_at          DateTime  @default(now())
  deleted_at          DateTime?
  updated_at          DateTime? @updatedAt
  status              String?

  reviews             Review[]
}
